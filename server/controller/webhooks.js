import { Webhook } from "svix";
import User from "../models/User.js";

// Clerk –∂“Ø–π–µ—Å—ñ–Ω–µ–Ω –∫–µ–ª–µ—Ç—ñ–Ω webhook —Å“±—Ä–∞–Ω—ã—Å—Ç–∞—Ä—ã–Ω ”©“£–¥–µ—É
export const clerkWebhooks = async (req, res) => {
  try {
    // Clerk –≤–µ–±—Ö—É–≥—ã–Ω—ã“£ “õ“±–ø–∏—è –∫—ñ–ª—Ç—ñ–º–µ–Ω —Ç–µ–∫—Å–µ—Ä—É
    const webhook = new Webhook(process.env.CLERK_WEBHOOK_SECRET);
    const reqBody = req.body;

    if (!reqBody) {
      return res.status(400).json({ error: "–°“±—Ä–∞–Ω—ã—Å –¥–µ–Ω–µ—Å—ñ –±–æ—Å" });
    }

    const { data, type } = reqBody;
    console.log("üì¶ Webhook –æ“õ–∏“ì–∞—Å—ã:", type);

    console.log("üì¶ RAW DATA:", JSON.stringify(data, null, 2));

    if (!data || !type) {
      return res.status(400).json({ error: "–°“±—Ä–∞–Ω—ã—Å –¥“±—Ä—ã—Å –µ–º–µ—Å" });
    }

    // –°“±—Ä–∞–Ω—ã—Å—Ç—ã —Ç–µ–∫—Å–µ—Ä—É ‚Äî “õ–æ–ª—Ç–∞“£–±–∞ –∞—Ä“õ—ã–ª—ã
    await webhook.verify(JSON.stringify(reqBody), {
      "svix-id": req.headers["svix-id"],
      "svix-timestamp": req.headers["svix-timestamp"],
      "svix-signature": req.headers["svix-signature"],
    });

    // Webhook –æ“õ–∏“ì–∞—Å—ã–Ω ”©“£–¥–µ—É
    switch (type) {
      case "user.created": {
        const email = data.email_addresses?.[0]?.email_address;
        const id = data.id;
        const image =
          data.image_url ||
          data.profile_image_url ||
          data.external_accounts?.[0]?.avatar_url ||
          "https://cdn-icons-png.flaticon.com/512/149/149071.png";
      
        console.log("üìß Email:", email);
        console.log("üß† ID:", id);
        console.log("üñº Image:", image);
      
        if (!id || !email || !image) {
          console.log("‚ùå “ö–æ–ª–¥–∞–Ω—É—à—ã–Ω—ã “õ“±—Ä—É “Ø—à—ñ–Ω –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–µ—Ç–∫—ñ–ª—ñ–∫—Å—ñ–∑");
          return res.status(400).json({ error: "–ú—ñ–Ω–¥–µ—Ç—Ç—ñ –¥–µ—Ä–µ–∫—Ç–µ—Ä –∂–æ“õ" });
        }
      
        const existingUser = await User.findOne({ email });
        if (existingUser) {
          console.log("‚ö†Ô∏è –ë“±–ª —ç–ª–µ–∫—Ç—Ä–æ–Ω–¥—ã“õ –ø–æ—à—Ç–∞—Å—ã –±–∞—Ä –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä");
          return res.status(200).json({ message: "User already exists" });
        }
      
        const userData = {
          _id: id,
          clerkId: id,
          email,
          name: `${data.first_name || ""} ${data.last_name || ""}`.trim(),
          image,
          resume: "",
        };
      
        await User.create(userData);
        console.log("‚úÖ “ö–æ–ª–¥–∞–Ω—É—à—ã —Å”ô—Ç—Ç—ñ “õ“±—Ä—ã–ª–¥—ã:", userData);
        return res.json({});
      }

      case "user.updated": {
        const updateData = {
          email: data.email_addresses?.[0]?.email_address || "",
          name: `${data.first_name || ""} ${data.last_name || ""}`.trim(),
          image: data.image_url || data.profile_image_url,
        };

        await User.findOneAndUpdate({ clerkId: data.id }, updateData);
        console.log("üîÑ “ö–æ–ª–¥–∞–Ω—É—à—ã –∂–∞“£–∞—Ä—Ç—ã–ª–¥—ã:", data.id);
        return res.json({});
      }

      case "user.deleted": {
        await User.findOneAndDelete({ clerkId: data.id });
        console.log("üóëÔ∏è “ö–æ–ª–¥–∞–Ω—É—à—ã –∂–æ–π—ã–ª–¥—ã:", data.id);
        return res.json({});
      }

      default:
        return res.status(400).json({ error: "–ë–µ–ª–≥—ñ—Å—ñ–∑ –æ“õ–∏“ì–∞ —Ç“Ø—Ä—ñ" });
    }
  } catch (error) {
    console.error("‚ùå Webhook “õ–∞—Ç–µ—Å—ñ:", error.message);
    return res.status(500).json({ success: false, message: "Webhook ”©“£–¥–µ—É “õ–∞—Ç–µ—Å—ñ" });
  }
};
